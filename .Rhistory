library(tseries)
library(ggplot2)
library(dplyr)
library(stats)
library(forecast)
#Upload CSV file
dataset <- read.csv("Climate_Indicators_Annual_Mean_Global_Surface_Temperature.csv")
head(dataset)
data <- subset(dataset, select = -Lowess)
head(data)
# Calculate mean
mean_value <- mean(data$No_Smoothing, na.rm = TRUE)
# Calculate minimum
min_value <- min(data$No_Smoothing, na.rm = TRUE)
# Calculate maximum
max_value <- max(data$No_Smoothing, na.rm = TRUE)
# Calculate variance
variance_value <- var(data$No_Smoothing, na.rm = TRUE)
# Print the results
cat("Mean:", mean_value, "\n")
cat("Minimum:", min_value, "\n")
cat("Maximum:", max_value, "\n")
cat("Variance:", variance_value, "\n")
quantiles <- quantile(data$No_Smoothing, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
# Plot the data with quantiles
hist(data$No_Smoothing, main = "Histogram of No_Smoothing", xlab = "No_Smoothing", ylab = "Frequency", col = "lightblue")
abline(v = quantiles, col = c("red", "green", "blue"), lwd = 2)
legend("topright", legend = c("25th Percentile= -0.2", "Median= -0.045", "75th Percentile= 0.28"), col = c("red", "green", "blue"), lty = 1, lwd = 2)
ggplot(data, aes(x = Year, y = No_Smoothing)) +
geom_line(color = "blue") +
geom_point(color = "white", size = 2) +
labs(title = "Time Series Plot", x = "Year", y = "Value")
time_series <- data$No_Smoothing
# Perform ADF test
adf_result <- adf.test(time_series)
# Print ADF test results
print(adf_result)
if (adf_result[["p.value"]] < 0.05) {
print(paste0("The time series is stationary"))
} else {
print(paste0("The time series is not stationary"))
}
ggplot(data, aes(x = Year, y = No_Smoothing)) +
geom_line(color = "blue") +
geom_smooth( method = "loess",
formula = "y ~ x",
se = FALSE,
col = "grey") +
labs(title = "Yearly Time Series with Trend Line", x = "Year", y = "ANNUAL AVERAGE ANOMALY")
acf(time_series,lag.max = 36)
pacf(time_series, lag.max = 36)
# Conduct Shapiro-Wilk test for normality
shapiro_test <- shapiro.test(time_series)
print(shapiro_test)
if (shapiro_test$p.value >= 0.05) {
print("The time series is Normal")
} else {
print("The time series is not Normal")
}
ggplot(data, aes(x = No_Smoothing)) +
geom_histogram(fill = "lightblue", color = "black", size = 0.9) +
labs(x = "ANNUAL AVERAGE ANOMALY", y = "Frequency",
title = "Histogram of time_series") +
theme(
axis.text = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(colour = "#E5E5E5"),
panel.background = element_rect(fill = "white") # White background
)
# Set the maximum lag for the test
max_lag <- 36
# Perform the Ljung-Box test
ljung_box_test <- Box.test(time_series, lag = max_lag, type = "Ljung-Box")
# Print the test results
print(ljung_box_test)
if (ljung_box_test$p.value < 0.05) {
print("Data points are Dependent up to the specified lag.")
} else {
print("Data points are independent up to the specified lag.")
}
# Create a time index
time_index <- seq_along(time_series)
# Fit a quadratic regression model
quadratic_model <- lm(time_series ~ poly(time_index, 2))
# Extract the fitted values
fitted_values <- predict(quadratic_model)
# Remove the quadratic trend
detrended_series <- time_series - fitted_values
# Plot original and detrended series
plot(time_index, time_series, type = "l", col = "blue", xlab = "Time", ylab = "Value", main = "Original and Detrended Time Series")
lines(time_index, detrended_series, col = "red")
legend("topright", legend = c("Original", "Detrended"), col = c("blue", "red"), lty = 1)
# Perform ADF test
adf_result <- adf.test(detrended_series)
# Print ADF test results
print(adf_result)
if (adf_result[["p.value"]] < 0.05) {
print(paste0("The time series is stationary"))
} else {
print(paste0("The time series is not stationary"))
}
# Convert data to time series
data_ts <- ts(data$No_Smoothing, start = c(1880), frequency = 1)
# Find the best ARIMA model using auto.arima
fit <- auto.arima(data_ts)
# Print the best model
print(fit)
# Make forecast
forecast_steps <- 76
forecast <- forecast(fit_model, h = forecast_steps)
# Make forecast
forecast_steps <- 76
forecast <- forecast(fit, h = forecast_steps)
# Plot forecasted ANNUAL AVERAGE ANOMALY
plot(data$No_Smoothing, type = "l", col = "blue", xlab = "Date", ylab = "ANNUAL AVERAGE ANOMALY", main = "ARIMA Model - ANNUAL AVERAGE ANOMALY (2024 to 2100)")
lines(forecast$mean, col = "red")
legend("topleft", legend = c("Actual", "Forecast"), col = c("blue", "red"), lty = 1)
library(tseries)
library(ggplot2)
library(dplyr)
library(stats)
library(forecast)
#Upload CSV file
dataset <- read.csv("Climate_Indicators_Annual_Mean_Global_Surface_Temperature.csv")
head(dataset)
data <- subset(dataset, select = -Lowess)
head(data)
# Calculate mean
mean_value <- mean(data$No_Smoothing, na.rm = TRUE)
# Calculate minimum
min_value <- min(data$No_Smoothing, na.rm = TRUE)
# Calculate maximum
max_value <- max(data$No_Smoothing, na.rm = TRUE)
# Calculate variance
variance_value <- var(data$No_Smoothing, na.rm = TRUE)
# Print the results
cat("Mean:", mean_value, "\n")
cat("Minimum:", min_value, "\n")
cat("Maximum:", max_value, "\n")
cat("Variance:", variance_value, "\n")
quantiles <- quantile(data$No_Smoothing, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
# Plot the data with quantiles
hist(data$No_Smoothing, main = "Histogram of No_Smoothing", xlab = "No_Smoothing", ylab = "Frequency", col = "lightblue")
abline(v = quantiles, col = c("red", "green", "blue"), lwd = 2)
legend("topright", legend = c("25th Percentile= -0.2", "Median= -0.045", "75th Percentile= 0.28"), col = c("red", "green", "blue"), lty = 1, lwd = 2)
ggplot(data, aes(x = Year, y = No_Smoothing)) +
geom_line(color = "blue") +
geom_point(color = "white", size = 2) +
labs(title = "Time Series Plot", x = "Year", y = "Value")
time_series <- data$No_Smoothing
# Perform ADF test
adf_result <- adf.test(time_series)
# Print ADF test results
print(adf_result)
if (adf_result[["p.value"]] < 0.05) {
print(paste0("The time series is stationary"))
} else {
print(paste0("The time series is not stationary"))
}
ggplot(data, aes(x = Year, y = No_Smoothing)) +
geom_line(color = "blue") +
geom_smooth( method = "loess",
formula = "y ~ x",
se = FALSE,
col = "grey") +
labs(title = "Yearly Time Series with Trend Line", x = "Year", y = "ANNUAL AVERAGE ANOMALY")
acf(time_series,lag.max = 36)
pacf(time_series, lag.max = 36)
# Conduct Shapiro-Wilk test for normality
shapiro_test <- shapiro.test(time_series)
print(shapiro_test)
if (shapiro_test$p.value >= 0.05) {
print("The time series is Normal")
} else {
print("The time series is not Normal")
}
ggplot(data, aes(x = No_Smoothing)) +
geom_histogram(fill = "lightblue", color = "black", size = 0.9) +
labs(x = "ANNUAL AVERAGE ANOMALY", y = "Frequency",
title = "Histogram of time_series") +
theme(
axis.text = element_text(face = "bold"),
axis.title = element_text(face = "bold"),
plot.title = element_text(face = "bold", hjust = 0.5),
panel.grid.major = element_line(colour = "#E5E5E5"),
panel.background = element_rect(fill = "white") # White background
)
# Set the maximum lag for the test
max_lag <- 36
# Perform the Ljung-Box test
ljung_box_test <- Box.test(time_series, lag = max_lag, type = "Ljung-Box")
# Print the test results
print(ljung_box_test)
if (ljung_box_test$p.value < 0.05) {
print("Data points are Dependent up to the specified lag.")
} else {
print("Data points are independent up to the specified lag.")
}
# Create a time index
time_index <- seq_along(time_series)
# Fit a quadratic regression model
quadratic_model <- lm(time_series ~ poly(time_index, 2))
# Extract the fitted values
fitted_values <- predict(quadratic_model)
# Remove the quadratic trend
detrended_series <- time_series - fitted_values
# Plot original and detrended series
plot(time_index, time_series, type = "l", col = "blue", xlab = "Time", ylab = "Value", main = "Original and Detrended Time Series")
lines(time_index, detrended_series, col = "red")
legend("topright", legend = c("Original", "Detrended"), col = c("blue", "red"), lty = 1)
# Perform ADF test
adf_result <- adf.test(detrended_series)
# Print ADF test results
print(adf_result)
if (adf_result[["p.value"]] < 0.05) {
print(paste0("The time series is stationary"))
} else {
print(paste0("The time series is not stationary"))
}
# Convert data to time series
data_ts <- ts(data$No_Smoothing, start = c(1880), frequency = 1)
# Find the best ARIMA model using auto.arima
fit <- auto.arima(data_ts)
# Print the best model
print(fit)
# Make forecast
forecast_steps <- 76
forecast <- forecast(fit, h = forecast_steps)
# Plot forecasted ANNUAL AVERAGE ANOMALY
plot(data$No_Smoothing, type = "l", col = "blue", xlab = "Date", ylab = "ANNUAL AVERAGE ANOMALY", main = "ARIMA Model - ANNUAL AVERAGE ANOMALY (2024 to 2100)")
lines(forecast$mean, col = "red")
legend("topleft", legend = c("Actual", "Forecast"), col = c("blue", "red"), lty = 1)
residuals <- residuals(fit)
# Residuals Plot
plot(residuals, type='o', col='#83A2FF', xlab='Date', ylab='Residuals', main='Residuals Plot')
grid()
mean_residual <- mean(residuals)
std_residual <- sd(residuals)
print(paste("Mean of residuals:", mean_residual))
print(paste("Standard deviation of residuals:", std_residual))
# Plot ACF and PACF of residuals
par(mfrow=c(2,1))
acf(residuals, main="ACF of Residuals")
pacf(residuals, main="PACF of Residuals")
# Plot histogram and Q-Q plot of residuals
par(mfrow=c(1,2))
hist(residuals, main="Histogram of Residuals")
qqnorm(residuals); qqline(residuals)
